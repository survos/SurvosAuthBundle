{% extends ['base.html.twig', "SurvosBaseBundle::base.html.twig"] %}

{% block title 'OAuth Providers' %}
{% block body %}
<div class="accordion" id="accordionExample">
    {% for key, provider in providers %}
        <div class="accordion-item">
            <h2 class="accordion-header" id="heading{{ key }}">
                <button class="accordion-button" type="button" data-bs-toggle="collapse"
                        data-bs-target="#collapse{{ key }}" aria-expanded="true" aria-controls="collapse{{ key }}">
                    {{ key }}
                    <code>{{ provider.library }}</code>
                </button>
            </h2>
            <div id="collapse{{ key }}" class="accordion-collapse collapse {{ true or loop.first ? 'show' : 'collapsed' }}"
                 aria-labelledby="heading{{ key }}" data-bs-parent="#accordionExample">
                <div class="accordion-body">
                    <a class="btn btn-primary btn-sm" href="{{ path('oauth_provider', {providerKey:key}) }}">
                        Configure {{ key }}</a>
                    <strong>This is the {{ key }}.</strong>
                    {% if loop.first %}
                        <code>{{ provider.library }}</code>
                    It is shown by default, until the collapse plugin adds the appropriate classes that we use to style
                    each element.
                    These classes control the overall appearance, as well as the showing and hiding via CSS transitions.
                    You can modify any of this with custom CSS or overriding our default variables. It's also worth
                    noting that just about any HTML can go within the <code>.accordion-body</code>, though the
                    transition does limit overflow.
                    {% endif %}
                </div>
            </div>
        </div>
    {% endfor %}
    <div class="accordion-item">
        <h2 class="accordion-header" id="headingTwo">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse"
                    data-bs-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                Accordion Item #2
            </button>
        </h2>
        <div id="collapseTwo" class="accordion-collapse collapse" aria-labelledby="headingTwo"
             data-bs-parent="#accordionExample">
            <div class="accordion-body">
                <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse
                plugin adds the appropriate classes that we use to style each element. These classes control the overall
                appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with
                custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go
                within the <code>.accordion-body</code>, though the transition does limit overflow.
            </div>
        </div>
    </div>
    <div class="accordion-item">
        <h2 class="accordion-header" id="headingThree">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse"
                    data-bs-target="#collapseThree" aria-expanded="false" aria-controls="collapseThree">
                Accordion Item #3
            </button>
        </h2>
        <div id="collapseThree" class="accordion-collapse collapse" aria-labelledby="headingThree"
             data-bs-parent="#accordionExample">
            <div class="accordion-body">
                <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse
                plugin adds the appropriate classes that we use to style each element. These classes control the overall
                appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with
                custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go
                within the <code>.accordion-body</code>, though the transition does limit overflow.
            </div>
        </div>
    </div>
</div>


{% if providers|length %}
    {% for provider in providers %}
        <ul class="list inline-list">
            {% for clientKey, client in provider.clients %}
                <li><a href="{{ path('oauth_connect_start', {clientKey: clientKey}) }}" class="btn btn-primary">
                        Login With {{ clientKey }}</a>
                </li>
            {% endfor %}
        </ul>

    {% endfor %}
{% endif %}

{# this isn't good!  We need to make that URL or route configuable in config/packages/survos_auth #}
SiteURL: <input value="{{ url('app_homepage') }}"/><br/>

<table class="table js-datatable">
    <thead>
    <tr>
        <th>Key</th>
        <th>Client ID</th>
        <th>Apps Url</th>
    </tr>
    </thead>
    <tbody>
    {% for providerKey, providerData in clients %}
        <tr>
            <td><a class="btn btn-primary btn-sm" href="{{ path('oauth_provider', {providerKey:providerKey}) }}">
                    Configure {{ providerKey }}</a>
            </td>

            <td>{{ providerData.client_id }}</td>
            <td><a target="_blank" href="{{ providerData.apps_url }}">{{ providerData.apps_url }}</a></td>
            <td>
                {{ providerData.clients ? providerData.clients|length }}
            </td>
            <td>
                {% for clientKey, client in providerData.clients %}
                {% set callback = url('oauth_connect_check', {clientKey: clientKey}, true) %}
                <input value="{{ callback }}"/><a href="{{ callback }}" target="_blank"><i
                            class="fas fa-external-link"></i></a></td>
            {% endfor %}
            {% set config = providerData %}
            <td><a target="_blank" href="{{ config.admin_url }}">{{ config.admin_url }}</a></td>
            <td><a target="_blank" href="{{ config.user_url }}">{{ config.user_url }}</a></td>
        </tr>
    {% endfor %}
    </tbody>
</table>
<ul>

    {% for providerKey, providerData in clients %}
        <h3>{{ providerKey }}</h3>
    {% endfor %}

    {#
    {% for key, clientInfo in clients %}
    {% set project = clientInfo.provider %}
        {% set client = clientInfo.client %}
        <li>{{ key }}:

        <a href="{{ path('oauth_connect_check', {clientKey: key}) }}">redirect</a>
        {% endfor %}
    </ul>
    #}

    {% endblock %}
